# The # character at the beginning of a line indicates a comment. Use
# comments to describe your configuration.
input {
    file {
        path => "C:/tmp/cai.csv"
        start_position => beginning
        sincedb_path => "NUL"
    }
}
# The filter part of this file is commented out to indicate that it is
# optional.
 filter {
    csv {
        separator => ","
        columns => ["ID","Source","TMC","Severity","Start_Time","End_Time","Start_Lat","Start_Lng","End_Lat","End_Lng",
        "Distance(mi)","Description","Number","Street","Side","City","County","State","Zipcode","Country","Timezone",
        "Airport_Code","Weather_Timestamp","Temperature(F)","Wind_Chill(F)","Humidity(%)","Pressure(in)","Visibility(mi)",
        "Wind_Direction","Wind_Speed(mph)","Precipitation(in)","Weather_Condition","Amenity","Bump","Crossing","Give_Way",
        "Junction","No_Exit","Railway","Roundabout","Station","Stop","Traffic_Calming","Traffic_Signal","Turning_Loop",
        "Sunrise_Sunset","Civil_Twilight","Nautical_Twilight","Astronomical_Twilight"]
        skip_header => "true"
    }

    #Remuevo los campos que me agrega LogStash. Agrego campos geo-point como string
    mutate {
        remove_field => [ "message", "@version","@timestamp","host","path"]
    }
    

    if [Start_Lat] and [Start_Lng]{
        mutate {
            add_field => {"start_location" => "%{Start_Lat},%{Start_Lng}"}
        }
    }
    else{
        mutate {
            add_field => {"start_location" => "0,0"}
        }
    }
   
    if [End_Lat] and [End_Lng]{
        mutate {
            add_field => {"end_location" => "%{End_Lat},%{End_Lng}"}
        }
    }
    else{
        mutate {
            add_field => {"end_location" => "0,0"}
        }
    }
   


    #Formateo de tipo de datos para los atributos numericos
    mutate {
        convert => {"TMC"=>"float"}
        convert => {"Severity"=>"integer"}
        convert => {"Start_Lat"=>"float"}
        convert => {"Start_Lng"=>"float"}
        convert => {"End_Lat"=>"float"}
        convert => {"End_Lng"=>"float"}
        convert => {"Distance(mi)"=>"float"}
        convert => {"Number"=>"float"}
        convert => {"Temperature(F)"=>"float"}
        convert => {"Wind_Chill(F)"=>"float"}
        convert => {"Humidity(%)"=>"float"}
        convert => {"Pressure(in)"=>"float"}
        convert => {"Visibility(mi)"=>"float"}
        convert => {"Wind_Speed(mph)"=>"float"}
        convert => {"Precipitation(in)"=>"float"}
    }
    
    date {
		match => ["Start_Time", "yyyy-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "Start_Time"
	}
    date {
		match => ["End_Time", "yyyy-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "End_Time"
	}
    date {
		match => ["Weather_Timestamp", "yyyy-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "Weather_Timestamp"
	}
}
output {
    elasticsearch {
        hosts => "localhost"
        index => "accidentdb"
    }
    stdout { }
}





























